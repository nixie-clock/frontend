// Generated by CoffeeScript 1.8.0
(function() {
  (function(window) {
    window.NixieClockView = (function() {
      function NixieClockView(model) {
        this.model = model;
        this.cacheElements();
        this.model.onTick = (function(_this) {
          return function() {
            return _this.render();
          };
        })(this);
      }

      NixieClockView.prototype.cacheElements = function() {
        var classess, i, _i;
        classess = [];
        for (i = _i = 0; _i <= 10; i = ++_i) {
          classess.push('s' + i);
        }
        this.classess = classess.join(' ');
        return this.el = {
          $current_seconds: $('.jsSeconds'),
          $current_time: $('.jsTime'),
          $time_left: $('.jsTimeLeft'),
          $time_binary: $('.jsTimeBin'),
          time: {
            hours: [$('#nc_h_0'), $('#nc_h_1')],
            minutes: [$('#nc_m_0'), $('#nc_m_1')],
            seconds: [$('#nc_s_0'), $('#nc_s_1')]
          },
          time_bin: {
            hours: [$('#ncb_h_0'), $('#ncb_h_1'), $('#ncb_h_2'), $('#ncb_h_3'), $('#ncb_h_4'), $('#ncb_h_5')],
            minutes: [$('#ncb_m_0'), $('#ncb_m_1'), $('#ncb_m_2'), $('#ncb_m_3'), $('#ncb_m_4'), $('#ncb_m_5')],
            seconds: [$('#ncb_s_0'), $('#ncb_s_1'), $('#ncb_s_2'), $('#ncb_s_3'), $('#ncb_s_4'), $('#ncb_s_5')]
          }
        };
      };

      NixieClockView.prototype.render = function() {
        var $binHou, $binMin, $binSec, $decHou, $decMin, $decSec, i, timeObj, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _results;
        timeObj = this.model.toJSON(true);
        this.el.$current_seconds.text("" + timeObj.current_seconds + " (" + timeObj.seconds_left + ")");
        this.el.$current_time.text("" + (timeObj.decimal_array.current_time.hours.join('')) + ":" + (timeObj.decimal_array.current_time.minutes.join('')) + ":" + (timeObj.decimal_array.current_time.seconds.join('')));
        this.el.$time_left.text("" + (timeObj.decimal_array.time_left.hours.join('')) + ":" + (timeObj.decimal_array.time_left.minutes.join('')) + ":" + (timeObj.decimal_array.time_left.seconds.join('')));
        this.el.$time_binary.text("" + (timeObj.binary_array.current_time.hours.join('')) + ":" + (timeObj.binary_array.current_time.minutes.join('')) + ":" + (timeObj.binary_array.current_time.seconds.join('')));
        _ref = this.el.time.hours;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          $decHou = _ref[i];
          $decHou.removeClass(this.classess).addClass('s' + timeObj.decimal_array.current_time.hours[i]);
        }
        _ref1 = this.el.time.minutes;
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          $decMin = _ref1[i];
          $decMin.removeClass(this.classess).addClass('s' + timeObj.decimal_array.current_time.minutes[i]);
        }
        _ref2 = this.el.time.seconds;
        for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
          $decSec = _ref2[i];
          $decSec.removeClass(this.classess).addClass('s' + timeObj.decimal_array.current_time.seconds[i]);
        }
        _ref3 = this.el.time_bin.hours;
        for (i = _l = 0, _len3 = _ref3.length; _l < _len3; i = ++_l) {
          $binHou = _ref3[i];
          $binHou.removeClass(this.classess).addClass('s' + timeObj.binary_array.current_time.hours[i]);
        }
        _ref4 = this.el.time_bin.minutes;
        for (i = _m = 0, _len4 = _ref4.length; _m < _len4; i = ++_m) {
          $binMin = _ref4[i];
          $binMin.removeClass(this.classess).addClass('s' + timeObj.binary_array.current_time.minutes[i]);
        }
        _ref5 = this.el.time_bin.seconds;
        _results = [];
        for (i = _n = 0, _len5 = _ref5.length; _n < _len5; i = ++_n) {
          $binSec = _ref5[i];
          _results.push($binSec.removeClass(this.classess).addClass('s' + timeObj.binary_array.current_time.seconds[i]));
        }
        return _results;
      };

      return NixieClockView;

    })();
    return $(function() {
      window.nixie_clock = new NixieClock();
      return nixie_clock.view = new NixieClockView(nixie_clock);
    });
  })(window);

}).call(this);
