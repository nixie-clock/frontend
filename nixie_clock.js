// Generated by CoffeeScript 1.8.0
(function() {
  (function(window) {
    var NixieClock;
    NixieClock = (function() {
      NixieClock.prototype.SECONDS_IN_DAY = 86400;

      function NixieClock(custom_time) {
        var nowDate, time;
        nowDate = new Date();
        if (typeof custom_time === 'number') {
          this.custom_time = this.dateToSeconds(custom_time);
        } else if (typeof custom_time === 'object' && !!custom_time) {
          time = new Date();
          if (custom_time.hours) {
            time.setHours(custom_time.hours);
          }
          if (custom_time.minutes) {
            time.setMinutes(custom_time.minutes);
          }
          if (custom_time.seconds) {
            time.setSeconds(custom_time.seconds);
          }
          this.custom_time = this.dateToSeconds(time);
        }
        this.currentTime = this.custom_time || this.dateToSeconds(nowDate);
        this.run();
      }

      NixieClock.prototype.onTick = function() {};

      NixieClock.prototype.dateToSeconds = function(dateObj) {
        return 3600 * dateObj.getHours() + 60 * dateObj.getMinutes() + dateObj.getSeconds();
      };

      NixieClock.prototype.secondsToObject = function(seconds) {
        var hou, min, sec;
        hou = Math.floor(seconds / 3600);
        min = Math.floor((seconds - hou * 3600) / 60);
        sec = seconds - hou * 3600 - min * 60;
        return {
          hours: hou,
          minutes: min,
          seconds: sec
        };
      };

      NixieClock.prototype.convertToNumSys = function(number, system) {
        var converted, counter, system_clone;
        if (system == null) {
          system = 10;
        }
        counter = 1;
        system_clone = system;
        while (59 >= system_clone) {
          system_clone *= system;
          counter++;
        }
        converted = new Array(counter);
        while (counter !== 0) {
          counter--;
          converted[counter] = number % system;
          number = Math.floor(number / system);
        }
        return converted;
      };

      NixieClock.prototype.runner = function() {
        if (this.custom_time) {
          this.currentTime++;
          this.currentTime %= this.SECONDS_IN_DAY;
        } else {
          this.currentTime = this.dateToSeconds(new Date());
        }
        if (typeof this.onTick === 'function') {
          return this.onTick();
        }
      };

      NixieClock.prototype.run = function() {
        return this._runnerTO = setInterval((function(_this) {
          return function() {
            return _this.runner();
          };
        })(this), 1000);
      };

      NixieClock.prototype.stop = function() {
        return clearInterval(this._runnerTO);
      };

      NixieClock.prototype.toJSON = function(full) {
        var current_seconds, current_time, returnObject, seconds_left, time_left;
        current_seconds = this.currentTime;
        seconds_left = this.SECONDS_IN_DAY - current_seconds;
        current_time = this.secondsToObject(current_seconds);
        time_left = this.secondsToObject(seconds_left);
        returnObject = {
          current_seconds: current_seconds,
          seconds_left: seconds_left,
          current_time: current_time,
          time_left: time_left
        };
        if (full) {
          returnObject.decimal_array = {
            current_time: {
              hours: this.convertToNumSys(current_time.hours),
              minutes: this.convertToNumSys(current_time.minutes),
              seconds: this.convertToNumSys(current_time.seconds)
            },
            time_left: {
              hours: this.convertToNumSys(time_left.hours),
              minutes: this.convertToNumSys(time_left.minutes),
              seconds: this.convertToNumSys(time_left.seconds)
            }
          };
          returnObject.binary_array = {
            current_time: {
              hours: this.convertToNumSys(current_time.hours, 2),
              minutes: this.convertToNumSys(current_time.minutes, 2),
              seconds: this.convertToNumSys(current_time.seconds, 2)
            },
            time_left: {
              hours: this.convertToNumSys(time_left.hours, 2),
              minutes: this.convertToNumSys(time_left.minutes, 2),
              seconds: this.convertToNumSys(time_left.seconds, 2)
            }
          };
        }
        return returnObject;
      };

      return NixieClock;

    })();
    return window.NixieClock = NixieClock;
  })(window);

}).call(this);
